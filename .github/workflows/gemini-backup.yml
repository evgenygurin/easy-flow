name: AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini (–†–µ–∑–µ—Ä–≤–Ω—ã–π)

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: '–ù–æ–º–µ—Ä issue –¥–ª—è –æ—Ç–≤–µ—Ç–∞'
        required: true
        type: string
      comment_body:
        description: '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞'
        required: false
        type: string

jobs:
  gemini-backup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          pip install requests google-generativeai

      - name: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          COMMENT_BODY: ${{ github.event.inputs.comment_body }}
        run: |
          python3 << 'EOF'
          import os
          import requests
          import google.generativeai as genai
          import json

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-2.5-pro')

          # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π issue
          repo = os.environ['GITHUB_REPOSITORY']
          issue_number = os.environ['ISSUE_NUMBER']
          comment_body = os.environ.get('COMMENT_BODY', '')
          
          # –ó–∞–ø—Ä–æ—Å –∫ GitHub API
          headers = {
              'Authorization': f"Bearer {os.environ['GITHUB_TOKEN']}",
              'Accept': 'application/vnd.github+json'
          }
          
          issue_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}"
          response = requests.get(issue_url, headers=headers)
          
          if response.status_code != 200:
              print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è issue: {response.status_code}")
              exit(1)
          
          issue_data = response.json()
          
          # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          context = f"""
          –¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo}.
          –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Å issue #{issue_number}.

          **–ù–∞–∑–≤–∞–Ω–∏–µ:** {issue_data['title']}

          **–û–ø–∏—Å–∞–Ω–∏–µ:**
          {issue_data['body']}

          **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**
          {comment_body if comment_body else "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."}

          **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
          1.  **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π** –ø—Ä–æ–±–ª–µ–º—É, –æ–ø–∏—Å–∞–Ω–Ω—É—é –≤ issue.
          2.  **–ü—Ä–µ–¥–ª–æ–∂–∏** —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.
          3.  –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, **–ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞**.
          4.  **–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.**
          """
          
          try:
              # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
              ai_response = model.generate_content(context)
              response_text = ai_response.text
              
              # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
              comment_data = {
                  'body': f"ü§ñ **AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini**\n\n{response_text}\n\n---\n*–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Google Gemini 2.5 Pro*"
              }
              
              comment_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}/comments"
              post_response = requests.post(comment_url, headers=headers, json=comment_data)
              
              if post_response.status_code == 201:
                  print("‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ issue")
              else:
                  print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {post_response.status_code}")
                  print(post_response.text)
                  
          except Exception as e:
              print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}")
              exit(1)
          EOF 