name: Dependency Management

on:
  schedule:
    # Check for dependency updates daily at 8 AM UTC
    - cron: '0 8 * * *'
    # Security updates check every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'security'
        type: choice
        options:
          - security
          - patch
          - minor
          - major
          - all
      auto_merge:
        description: 'Automatically merge security updates'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Dependency Vulnerability Monitor
  vulnerability-check:
    runs-on: ubuntu-latest
    outputs:
      vulnerabilities-found: ${{ steps.check.outputs.vulnerabilities-found }}
      critical-count: ${{ steps.check.outputs.critical-count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit safety

      - name: Run vulnerability checks
        id: check
        run: |
          echo "# Dependency Vulnerability Report" > vulnerability-report.md
          echo "" >> vulnerability-report.md
          echo "Generated on: $(date)" >> vulnerability-report.md
          echo "" >> vulnerability-report.md
          
          # Run pip-audit
          pip-audit --format=json --output=pip-audit.json || true
          
          # Run safety check
          safety check --json --output=safety.json || true
          
          # Parse results
          VULN_COUNT=0
          CRITICAL_COUNT=0
          
          if [ -f "pip-audit.json" ] && [ -s "pip-audit.json" ]; then
            VULN_COUNT=$(python -c "import json; data=json.load(open('pip-audit.json')); print(len(data.get('vulnerabilities', [])))")
            echo "## pip-audit Results" >> vulnerability-report.md
            echo "Found $VULN_COUNT vulnerabilities" >> vulnerability-report.md
            echo "" >> vulnerability-report.md
          fi
          
          if [ -f "safety.json" ] && [ -s "safety.json" ]; then
            SAFETY_COUNT=$(python -c "import json; data=json.load(open('safety.json')); print(len(data))" 2>/dev/null || echo "0")
            echo "## Safety Results" >> vulnerability-report.md
            echo "Found $SAFETY_COUNT security issues" >> vulnerability-report.md
            echo "" >> vulnerability-report.md
          fi
          
          # Set outputs
          echo "vulnerabilities-found=$((VULN_COUNT + SAFETY_COUNT > 0))" >> $GITHUB_OUTPUT
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          
          # Generate SBOM
          pip list --format=json > sbom.json
          
          echo "## Software Bill of Materials" >> vulnerability-report.md
          echo "See sbom.json for complete package list" >> vulnerability-report.md

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: |
            vulnerability-report.md
            pip-audit.json
            safety.json
            sbom.json

  # Automated Security Updates
  security-updates:
    runs-on: ubuntu-latest
    needs: vulnerability-check
    if: needs.vulnerability-check.outputs.vulnerabilities-found == 'true' || github.event.inputs.update_type == 'security' || github.event.inputs.update_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit safety pip-tools

      - name: Generate updated requirements
        run: |
          # Create backup
          cp requirements.txt requirements.txt.backup
          
          # Get list of packages with vulnerabilities
          pip-audit --format=json --output=audit.json || true
          
          if [ -f "audit.json" ] && [ -s "audit.json" ]; then
            python -c "
            import json
            import subprocess
            import sys
            
            try:
                with open('audit.json') as f:
                    data = json.load(f)
                
                vulnerable_packages = set()
                for vuln in data.get('vulnerabilities', []):
                    pkg_name = vuln.get('package')
                    if pkg_name:
                        vulnerable_packages.add(pkg_name.lower())
                
                if vulnerable_packages:
                    print(f'Found vulnerabilities in: {vulnerable_packages}')
                    
                    # Read requirements.txt
                    with open('requirements.txt') as f:
                        lines = f.readlines()
                    
                    updated_lines = []
                    updated_packages = []
                    
                    for line in lines:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            pkg_name = line.split('==')[0].split('>=')[0].split('~=')[0].lower()
                            if pkg_name in vulnerable_packages:
                                # Try to update to latest version
                                try:
                                    result = subprocess.run(['pip', 'index', 'versions', pkg_name], 
                                                          capture_output=True, text=True)
                                    if result.returncode == 0:
                                        # Extract latest version (simplified)
                                        updated_lines.append(line)  # Keep original for now
                                        updated_packages.append(pkg_name)
                                    else:
                                        updated_lines.append(line)
                                except:
                                    updated_lines.append(line)
                            else:
                                updated_lines.append(line)
                        else:
                            updated_lines.append(line)
                    
                    # Write updated requirements
                    with open('requirements.txt', 'w') as f:
                        f.write('\n'.join(updated_lines))
                    
                    if updated_packages:
                        print(f'Security updates available for: {updated_packages}')
                        with open('security-updates.txt', 'w') as f:
                            f.write('\n'.join(updated_packages))
                else:
                    print('No vulnerable packages found')
            except Exception as e:
                print(f'Error processing vulnerabilities: {e}')
                sys.exit(1)
            "
          fi

      - name: Test updated dependencies
        run: |
          # Install updated dependencies
          pip install -r requirements.txt
          
          # Run basic import tests
          python -c "
          import sys
          try:
              import fastapi
              import uvicorn
              import pydantic
              import sqlalchemy
              import redis
              print('‚úÖ Core dependencies import successfully')
          except ImportError as e:
              print(f'‚ùå Import error: {e}')
              sys.exit(1)
          "

      - name: Create pull request for security updates
        if: ${{ hashFiles('security-updates.txt') != '' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create branch
          BRANCH_NAME="security-updates-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          # Commit changes
          git add requirements.txt
          git commit -m "üîí Security updates for vulnerable dependencies

          Updated packages with known security vulnerabilities:
          $(cat security-updates.txt | sed 's/^/- /')
          
          ü§ñ Generated with GitHub Actions"
          
          git push origin "$BRANCH_NAME"
          
          # Create PR using GitHub CLI
          gh pr create \
            --title "üîí Security Updates - $(date +%Y-%m-%d)" \
            --body "$(cat <<'EOF'
          ## Security Dependency Updates
          
          This PR contains security updates for packages with known vulnerabilities.
          
          ### Updated Packages
          $(cat security-updates.txt | sed 's/^/- /')
          
          ### Testing
          - [x] Dependencies install successfully  
          - [x] Core imports work correctly
          - [ ] All tests pass (will be verified by CI)
          
          ### Auto-merge
          ${{ github.event.inputs.auto_merge == 'true' && '‚úÖ This PR is marked for auto-merge after CI passes' || '‚ùå Manual review required' }}
          
          ü§ñ Generated with GitHub Actions
          EOF
          )" \
            --label "security,dependencies,automated"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Regular Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type != 'security' && (github.event.inputs.update_type != '' || github.event.schedule)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Check for outdated packages
        run: |
          pip install -r requirements.txt
          pip list --outdated --format=json > outdated.json
          
          python -c "
          import json
          
          with open('outdated.json') as f:
              outdated = json.load(f)
          
          if outdated:
              print('# Outdated Packages Report')
              print()
              for pkg in outdated:
                  current = pkg['version']
                  latest = pkg['latest_version']
                  name = pkg['name']
                  print(f'- **{name}**: {current} ‚Üí {latest}')
              
              # Save for later use
              with open('outdated-summary.md', 'w') as f:
                  f.write('# Outdated Dependencies\\n\\n')
                  for pkg in outdated:
                      f.write(f\"- **{pkg['name']}**: {pkg['version']} ‚Üí {pkg['latest_version']}\\n\")
          else:
              print('All packages are up to date!')
              with open('outdated-summary.md', 'w') as f:
                  f.write('All dependencies are up to date! ‚úÖ')
          "

      - name: Generate dependency update strategy
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"
          
          echo "# Dependency Update Strategy" > update-strategy.md
          echo "" >> update-strategy.md
          echo "Update type: **$UPDATE_TYPE**" >> update-strategy.md
          echo "" >> update-strategy.md
          
          case $UPDATE_TYPE in
            "patch")
              echo "- ‚úÖ Patch versions (bug fixes)" >> update-strategy.md
              echo "- ‚ùå Minor versions (new features)" >> update-strategy.md  
              echo "- ‚ùå Major versions (breaking changes)" >> update-strategy.md
              ;;
            "minor")
              echo "- ‚úÖ Patch versions (bug fixes)" >> update-strategy.md
              echo "- ‚úÖ Minor versions (new features)" >> update-strategy.md
              echo "- ‚ùå Major versions (breaking changes)" >> update-strategy.md
              ;;
            "major")
              echo "- ‚úÖ Patch versions (bug fixes)" >> update-strategy.md
              echo "- ‚úÖ Minor versions (new features)" >> update-strategy.md
              echo "- ‚úÖ Major versions (breaking changes)" >> update-strategy.md
              ;;
          esac

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            outdated.json
            outdated-summary.md
            update-strategy.md

  # License Compliance Monitor
  license-monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses

      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=markdown --output-file=licenses.md
          
          # Check for license changes
          if [ -f "previous-licenses.json" ]; then
            python -c "
            import json
            
            with open('licenses.json') as f:
                current = {pkg['Name']: pkg['License'] for pkg in json.load(f)}
            
            try:
                with open('previous-licenses.json') as f:
                    previous = {pkg['Name']: pkg['License'] for pkg in json.load(f)}
                
                changes = []
                for pkg, license in current.items():
                    if pkg in previous and previous[pkg] != license:
                        changes.append(f'{pkg}: {previous[pkg]} ‚Üí {license}')
                    elif pkg not in previous:
                        changes.append(f'{pkg}: NEW ({license})')
                
                if changes:
                    with open('license-changes.md', 'w') as f:
                        f.write('# License Changes Detected\\n\\n')
                        for change in changes:
                            f.write(f'- {change}\\n')
                else:
                    with open('license-changes.md', 'w') as f:
                        f.write('No license changes detected.\\n')
            except FileNotFoundError:
                with open('license-changes.md', 'w') as f:
                    f.write('First license scan - no changes to compare.\\n')
            "
          else
            echo "First license scan - no changes to compare." > license-changes.md
          fi
          
          # Save current licenses for next run
          cp licenses.json previous-licenses.json

      - name: Check prohibited licenses
        run: |
          python -c "
          import json
          
          prohibited = ['GPL-3.0', 'AGPL-3.0', 'LGPL-3.0', 'GPL-2.0', 'AGPL-1.0']
          restricted = ['GPL-2.0+', 'LGPL-2.1+', 'EPL-1.0', 'EPL-2.0']
          
          with open('licenses.json') as f:
              licenses = json.load(f)
          
          issues = []
          warnings = []
          
          for pkg in licenses:
              license = pkg['License']
              name = pkg['Name']
              
              if license in prohibited:
                  issues.append(f'‚ùå {name}: {license} (PROHIBITED)')
              elif license in restricted:
                  warnings.append(f'‚ö†Ô∏è {name}: {license} (REQUIRES REVIEW)')
          
          with open('license-compliance.md', 'w') as f:
              f.write('# License Compliance Report\\n\\n')
              
              if issues:
                  f.write('## ‚ùå Prohibited Licenses Found\\n\\n')
                  for issue in issues:
                      f.write(f'{issue}\\n')
                  f.write('\\n')
              
              if warnings:
                  f.write('## ‚ö†Ô∏è Licenses Requiring Review\\n\\n')
                  for warning in warnings:
                      f.write(f'{warning}\\n')
                  f.write('\\n')
              
              if not issues and not warnings:
                  f.write('‚úÖ All licenses are compliant!\\n')
          
          if issues:
              exit(1)
          "

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.md
            license-changes.md
            license-compliance.md
            previous-licenses.json

  # Summary Report
  dependency-summary:
    runs-on: ubuntu-latest
    if: always()
    needs: [vulnerability-check, security-updates, dependency-updates, license-monitor]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate dependency summary
        run: |
          echo "# Dependency Management Summary" > dependency-summary.md
          echo "" >> dependency-summary.md
          echo "Generated on: $(date)" >> dependency-summary.md
          echo "" >> dependency-summary.md
          
          # Vulnerability status
          if [ -f "vulnerability-report/vulnerability-report.md" ]; then
            echo "## üîç Security Status" >> dependency-summary.md
            echo "" >> dependency-summary.md
            cat vulnerability-report/vulnerability-report.md >> dependency-summary.md
            echo "" >> dependency-summary.md
          fi
          
          # License compliance
          if [ -f "license-reports/license-compliance.md" ]; then
            echo "## üìÑ License Compliance" >> dependency-summary.md
            echo "" >> dependency-summary.md
            cat license-reports/license-compliance.md >> dependency-summary.md
            echo "" >> dependency-summary.md
          fi
          
          # Update status
          if [ -f "dependency-reports/outdated-summary.md" ]; then
            echo "## üì¶ Update Status" >> dependency-summary.md
            echo "" >> dependency-summary.md
            cat dependency-reports/outdated-summary.md >> dependency-summary.md
            echo "" >> dependency-summary.md
          fi

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: dependency-summary
          path: dependency-summary.md

      - name: Create issue for critical vulnerabilities
        if: needs.vulnerability-check.outputs.critical-count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('dependency-summary.md')) {
              const summary = fs.readFileSync('dependency-summary.md', 'utf8');
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Critical Security Vulnerabilities Detected',
                body: '## ‚ö†Ô∏è URGENT: Critical vulnerabilities found in dependencies\n\n' + summary,
                labels: ['security', 'critical', 'dependencies']
              });
            }