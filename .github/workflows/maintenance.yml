name: Automated Maintenance

on:
  schedule:
    # Weekly maintenance on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - cleanup
          - docs
          - metrics
          - health-check

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Code Cleanup and Formatting
  code-cleanup:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.maintenance_type == 'full' || github.event.inputs.maintenance_type == 'cleanup' || github.event.inputs.maintenance_type == '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run code formatting
        run: |
          ruff format app tests
          ruff check app tests --fix --unsafe-fixes

      - name: Remove unused imports
        run: |
          pip install autoflake
          autoflake --remove-all-unused-imports --recursive --in-place app tests

      - name: Sort imports
        run: |
          pip install isort
          isort app tests

      - name: Check for TODO/FIXME comments
        run: |
          echo "# Code Maintenance Report" > maintenance-report.md
          echo "" >> maintenance-report.md
          echo "## TODO/FIXME Comments Found:" >> maintenance-report.md
          echo "" >> maintenance-report.md
          grep -rn "TODO\|FIXME\|XXX\|HACK" app tests || echo "No TODO/FIXME comments found" >> maintenance-report.md

      - name: Check for dead code
        run: |
          pip install vulture
          vulture app --exclude='*/__init__.py' > dead-code-report.txt || true
          echo "" >> maintenance-report.md
          echo "## Potential Dead Code:" >> maintenance-report.md
          echo "" >> maintenance-report.md
          if [ -s dead-code-report.txt ]; then
            echo '```' >> maintenance-report.md
            cat dead-code-report.txt >> maintenance-report.md
            echo '```' >> maintenance-report.md
          else
            echo "No dead code detected" >> maintenance-report.md
          fi

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🧹 Automated code cleanup and formatting

            - Applied code formatting with ruff
            - Removed unused imports
            - Sorted imports with isort
            - Generated maintenance report
            
            🤖 Generated with GitHub Actions"
            git push
          fi

      - name: Upload maintenance report
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report
          path: maintenance-report.md

  # Documentation Generation
  docs-update:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.maintenance_type == 'full' || github.event.inputs.maintenance_type == 'docs' || github.event.inputs.maintenance_type == '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pydoc-markdown

      - name: Generate API documentation
        run: |
          mkdir -p docs/api
          pydoc-markdown -p app > docs/api/api-reference.md

      - name: Update README with project statistics
        run: |
          python -c "
          import os
          import subprocess
          
          # Count lines of code
          result = subprocess.run(['find', 'app', '-name', '*.py', '-exec', 'wc', '-l', '{}', '+'], 
                                capture_output=True, text=True)
          lines = sum(int(line.split()[0]) for line in result.stdout.strip().split('\n')[:-1])
          
          # Count files
          result = subprocess.run(['find', 'app', '-name', '*.py'], capture_output=True, text=True)
          files = len(result.stdout.strip().split('\n'))
          
          # Update stats in README
          print(f'📊 Project Statistics:')
          print(f'- Python files: {files}')
          print(f'- Lines of code: {lines}')
          "

      - name: Generate changelog
        run: |
          git log --oneline --since="1 week ago" > RECENT_CHANGES.md
          echo "# Recent Changes (Last 7 Days)" > temp_changelog.md
          echo "" >> temp_changelog.md
          if [ -s RECENT_CHANGES.md ]; then
            while IFS= read -r line; do
              echo "- $line" >> temp_changelog.md
            done < RECENT_CHANGES.md
          else
            echo "No recent changes" >> temp_changelog.md
          fi
          mv temp_changelog.md RECENT_CHANGES.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          if git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git commit -m "📚 Automated documentation update

            - Generated API documentation
            - Updated project statistics
            - Generated recent changes log
            
            🤖 Generated with GitHub Actions"
            git push
          fi

  # Performance Metrics Collection
  performance-metrics:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.maintenance_type == 'full' || github.event.inputs.maintenance_type == 'metrics' || github.event.inputs.maintenance_type == '' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install memory-profiler line-profiler

      - name: Run performance profiling
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          # Start the application in background
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          APP_PID=$!
          sleep 10
          
          # Basic performance metrics
          echo "# Performance Metrics Report" > performance-report.md
          echo "" >> performance-report.md
          echo "## Application Startup Time" >> performance-report.md
          echo "✅ Application started successfully" >> performance-report.md
          echo "" >> performance-report.md
          
          # Memory usage check
          ps -o pid,vsz,rss,comm -p $APP_PID >> performance-report.md
          
          # API response time test
          echo "" >> performance-report.md
          echo "## API Response Times" >> performance-report.md
          curl -w "Health endpoint: %{time_total}s\n" -s -o /dev/null http://localhost:8000/health >> performance-report.md
          
          # Stop the application
          kill $APP_PID

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md

  # Repository Health Check
  health-check:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.maintenance_type == 'full' || github.event.inputs.maintenance_type == 'health-check' || github.event.inputs.maintenance_type == '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Repository health assessment
        run: |
          echo "# Repository Health Report" > health-report.md
          echo "" >> health-report.md
          
          # Check for large files
          echo "## Large Files Check" >> health-report.md
          find . -type f -size +10M -not -path "./.git/*" > large-files.txt
          if [ -s large-files.txt ]; then
            echo "⚠️ Large files found:" >> health-report.md
            echo '```' >> health-report.md
            cat large-files.txt >> health-report.md
            echo '```' >> health-report.md
          else
            echo "✅ No large files found" >> health-report.md
          fi
          
          # Check git repository size
          echo "" >> health-report.md
          echo "## Repository Size" >> health-report.md
          du -sh .git >> health-report.md
          
          # Check for old branches
          echo "" >> health-report.md
          echo "## Branch Analysis" >> health-report.md
          git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin | 
            awk '$2 < "'$(date -d'30 days ago' '+%Y-%m-%d')'"' > old-branches.txt
          if [ -s old-branches.txt ]; then
            echo "⚠️ Branches older than 30 days:" >> health-report.md
            echo '```' >> health-report.md
            cat old-branches.txt >> health-report.md
            echo '```' >> health-report.md
          else
            echo "✅ No old branches found" >> health-report.md
          fi
          
          # Check for security files
          echo "" >> health-report.md
          echo "## Security Configuration" >> health-report.md
          if [ -f ".github/SECURITY.md" ]; then
            echo "✅ Security policy exists" >> health-report.md
          else
            echo "⚠️ No security policy found" >> health-report.md
          fi
          
          if [ -f ".gitignore" ]; then
            echo "✅ .gitignore exists" >> health-report.md
          else
            echo "⚠️ No .gitignore found" >> health-report.md
          fi

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: health-report.md

  # Cleanup temp files and artifacts
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [code-cleanup, docs-update, performance-metrics, health-check]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate maintenance summary
        run: |
          echo "# Weekly Maintenance Summary" > maintenance-summary.md
          echo "" >> maintenance-summary.md
          echo "Generated on: $(date)" >> maintenance-summary.md
          echo "" >> maintenance-summary.md
          
          # Combine all reports
          for report in maintenance-report/maintenance-report.md performance-report/performance-report.md health-report/health-report.md; do
            if [ -f "$report" ]; then
              echo "---" >> maintenance-summary.md
              cat "$report" >> maintenance-summary.md
              echo "" >> maintenance-summary.md
            fi
          done
          
          echo "## Maintenance Actions Completed" >> maintenance-summary.md
          echo "- ✅ Code cleanup and formatting" >> maintenance-summary.md
          echo "- ✅ Documentation updates" >> maintenance-summary.md
          echo "- ✅ Performance metrics collection" >> maintenance-summary.md
          echo "- ✅ Repository health check" >> maintenance-summary.md

      - name: Upload maintenance summary
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-summary
          path: maintenance-summary.md

      - name: Create maintenance issue
        if: github.event.schedule
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('maintenance-summary.md')) {
              const summary = fs.readFileSync('maintenance-summary.md', 'utf8');
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔧 Weekly Maintenance Report - ${new Date().toISOString().split('T')[0]}`,
                body: summary,
                labels: ['maintenance', 'automated']
              });
            }