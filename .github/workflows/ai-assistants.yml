name: ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã

on:
  issues:
    types: [opened, edited, reopened, assigned]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      pr_number:
        description: '–ù–æ–º–µ—Ä PR –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        required: false
        type: number

env:
  STANDARD_TIMEOUT: 15

jobs:
  # Claude AI Assistant
  claude:
    name: Claude Assistant
    if: |
      github.repository == 'evgenygurin/easy-flow' && (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
      )
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
        id: auth
        uses: ./.github/actions/setup-github-app
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ Claude
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ steps.auth.outputs.token }}
          allowed_tools: "Bash(pytest),Bash(uvicorn main:app --reload),Bash(pip install -r requirements.txt),Read,Write,Edit,Grep,Glob"
          custom_instructions: |
            –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º –Ω–∞ Python/FastAPI. –°–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
            - –ò—Å–ø–æ–ª—å–∑—É–π `Black` –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞.
            - –°–æ–±–ª—é–¥–∞–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã PEP 8.
            - –î–æ–±–∞–≤–ª—è–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.
            - –ò—Å–ø–æ–ª—å–∑—É–π `pytest` –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
            - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
            - –í—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–π —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥.

  # Claude Code Review
  claude-review:
    name: Claude Code Review
    if: |
      github.repository == 'evgenygurin/easy-flow' && (
        github.event_name == 'pull_request' ||
        (github.event_name == 'issues' && contains(github.event.issue.body, '@claude-review')) ||
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude-review'))
      )
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
        id: auth
        uses: ./.github/actions/setup-github-app
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ó–∞–ø—É—Å–∫ Code Review –æ—Ç Claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ steps.auth.outputs.token }}
          use_sticky_comment: true
          allowed_tools: "Bash(pip install),Bash(black),Bash(mypy),Bash(flake8),Bash(pytest),Bash(uvicorn main:app --reload),Read,Grep,Glob,Edit,MultiEdit,Write"
          direct_prompt: |
            –¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–æ–≤–æ–¥—è—â–∏–π code review –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Python/FastAPI. 
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç pull request –∏ –¥–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º:
            
            - –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Python/FastAPI.
            - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–≥–∏ –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
            - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞.
            - –ü–æ–ª–Ω–æ—Ç–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤.
            
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
            –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π `pytest` –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.

  # Gemini AI Assistant
  gemini:
    name: Gemini Assistant
    if: |
      github.repository == 'evgenygurin/easy-flow' && (
        github.event_name == 'pull_request' ||
        github.event_name == 'pull_request_review_comment' ||
        (github.event_name == 'issues' && contains(github.event.issue.body, '@gemini')) ||
        (github.event_name == 'issue_comment' && (
          contains(github.event.comment.body, '@gemini') ||
          contains(github.event.comment.body, '@gemini-cli')
        ))
      )
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      repository-projects: read
    
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
        id: auth
        uses: ./.github/actions/setup-github-app
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ Gemini API
        run: |
          if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
            echo "‚ùå –°–µ–∫—Ä–µ—Ç GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á Gemini API –≤ —Å–µ–∫—Ä–µ—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            exit 1
          fi
          echo "‚úÖ –ö–ª—é—á GEMINI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

      - name: –ó–∞–ø—É—Å–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ Gemini
        uses: google-gemini/gemini-cli-action@main
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          
      - name: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        if: always()
        run: |
          echo "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${{ job.status }}"
          echo "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${{ github.repository }}"
          echo "–°–æ–±—ã—Ç–∏–µ: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "–ù–æ–º–µ—Ä issue: ${{ github.event.issue.number }}"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            echo "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ issue: ${{ github.event.issue.number }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "–ù–æ–º–µ—Ä PR: ${{ github.event.pull_request.number }}"
          fi

  # Gemini CLI –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–º–∞–Ω–¥  
  gemini-cli:
    name: Gemini CLI
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage'))) && 
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    
    steps:
      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ PR
        id: get_pr_branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER=${{ github.event.issue.number }}
            BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q .headRefName --repo "$REPOSITORY")
            echo "name=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          fi

      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_pr_branch.outputs.name }}
          fetch_depth: 0

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
        id: auth
        uses: ./.github/actions/setup-github-app
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π PR
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          GH_TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          GH_TOKEN: ${{ steps.auth.outputs.token }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          gh pr comment $PR_NUMBER --body "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–∏–º! ü§ñ" --repo $REPOSITORY

      - name: –ó–∞–ø—É—Å–∫ Gemini CLI
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          REPOSITORY: ${{ github.repository }}
          USER_REQUEST: ${{github.event.comment.body}}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git config)",
                "run_shell_command(git status)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(git diff)",
                "write_file"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |
            –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ shell-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            –ù–∞—á–Ω–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
              1. –í—ã–ø–æ–ª–Ω–∏: `echo "$USER_REQUEST"`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              2. –í—ã–ø–æ–ª–Ω–∏: `echo "$REPOSITORY"`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
              3. –í—ã–ø–æ–ª–Ω–∏: `echo "$PR_NUMBER"`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä PR
              4. –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π: `cat –∏–º—è_—Ñ–∞–π–ª–∞`, `head -50 –∏–º—è_—Ñ–∞–π–ª–∞` –∏–ª–∏ `tail -50 –∏–º—è_—Ñ–∞–π–ª–∞`
            –û—Ç–≤–µ—Ç—å –Ω–∞ $USER_REQUEST;
            –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
            1. –ï—Å–ª–∏ —Ç—ã –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é 'git add .'. –í–ê–ñ–ù–û: –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Ñ–∞–π–ª response.md.
            2. –ó–∞–∫–æ–º–º–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è 'git commit -m "—Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"'.
            3. –û—Ç–ø—Ä–∞–≤—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é 'git push'.
            4. –ó–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª: write_file("response.md", "<—Ç–≤–æ–π –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å>")
            5. –û–ø—É–±–ª–∏–∫—É–π –æ—Ç–≤–µ—Ç: gh pr comment $PR_NUMBER --body-file response.md --repo $REPOSITORY