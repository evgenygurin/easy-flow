name: üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Issues

on:
  schedule:
    - cron: '0 * * * *' # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
  issues:
    types: [opened, reopened]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: '–ù–æ–º–µ—Ä issue –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        required: true
        type: number
      action:
        description: '–î–µ–π—Å—Ç–≤–∏–µ: triage, backup-response'
        required: true
        type: choice
        options:
          - triage
          - backup-response

env:
  STANDARD_TIMEOUT: 10

jobs:
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö issues
  auto-triage:
    name: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if: >
      github.event_name == 'issues' ||
      github.event_name == 'workflow_dispatch' && inputs.action == 'triage' ||
      (github.event_name == 'issue_comment' && 
       contains(github.event.comment.body, '@gemini-cli /triage') &&
       (github.event.comment.author_association == 'OWNER' ||
        github.event.comment.author_association == 'MEMBER' ||
        github.event.comment.author_association == 'COLLABORATOR'))
    timeout-minutes: 5
    permissions:
      issues: write
      contents: read
      id-token: write
    concurrency:
      group: ${{ github.workflow }}-triage-${{ github.event.issue.number || inputs.issue_number }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
        id: auth
        uses: ./.github/actions/setup-github-app
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ issue
        id: set_issue_context
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "issue_number=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi

      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π issue
        id: get_issue_details
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          ISSUE_NUMBER: ${{ steps.set_issue_context.outputs.issue_number }}
        run: |
          ISSUE_JSON=$(gh issue view $ISSUE_NUMBER --json title,body)
          echo "issue_title=$(echo $ISSUE_JSON | jq -r .title)" >> $GITHUB_OUTPUT
          # Using a delimiter to handle multiline body
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "issue_body<<$EOF" >> $GITHUB_OUTPUT
          echo "$(echo $ISSUE_JSON | jq -r .body)" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: –ó–∞–ø—É—Å–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ issue —Å –ø–æ–º–æ—â—å—é Gemini
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          ISSUE_TITLE: ${{ steps.get_issue_details.outputs.issue_title }}
          ISSUE_BODY: ${{ steps.get_issue_details.outputs.issue_body }}
          ISSUE_NUMBER: ${{ steps.set_issue_context.outputs.issue_number }}
          REPOSITORY: ${{ github.repository }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(gh label list)",
                "run_shell_command(gh issue edit)"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |
            –¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ issue. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≤ GitHub –∏ –ø—Ä–∏–º–µ–Ω–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–∫.

            –®–∞–≥–∏:
            1. –í—ã–ø–æ–ª–Ω–∏: `gh label list`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–∫.
            2. –ò–∑—É—á–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–ª–æ issue, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
            3. –í—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–µ—Ç–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏ –º–µ—Ç–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω–∞–º `kind/*`, `area/*` –∏ `priority/*`.
            4. –ü—Ä–∏–º–µ–Ω–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∫ —ç—Ç–æ–π issue —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: `gh issue edit ISSUE_NUMBER --add-label "–º–µ—Ç–∫–∞1,–º–µ—Ç–∫–∞2"`
            5. –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–∫–∞ `status/needs-triage`, —É–¥–∞–ª–∏ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: `gh issue edit ISSUE_NUMBER --remove-label "status/needs-triage"`

            –ü—Ä–∞–≤–∏–ª–∞:
            - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
            - –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –Ω–µ –∏–∑–º–µ–Ω—è–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ issue.
            - –°–æ—Ä—Ç–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é issue.
            - –ù–∞–∑–Ω–∞—á—å –≤—Å–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ issue.

  # –ú–∞—Å—Å–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ issues –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
  scheduled-triage:
    name: –ü–ª–∞–Ω–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: write
      
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
        id: auth
        uses: ./.github/actions/setup-github-app
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ü–æ–∏—Å–∫ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö issue
        id: find_issues
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üîç –ü–æ–∏—Å–∫ issue –±–µ–∑ –º–µ—Ç–æ–∫..."
          NO_LABEL_ISSUES=$(gh issue list --repo ${{ github.repository }} --search "is:open is:issue no:label" --json number,title,body)

          echo "üè∑Ô∏è –ü–æ–∏—Å–∫ issue, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏..."
          NEED_TRIAGE_ISSUES=$(gh issue list --repo ${{ github.repository }} --search "is:open is:issue label:\"status/needs-triage\"" --json number,title,body)

          echo "üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ issue..."
          ISSUES=$(echo "$NO_LABEL_ISSUES" "$NEED_TRIAGE_ISSUES" | jq -c -s 'add | unique_by(.number)')

          echo "üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è GitHub Actions..."
          echo "issues_to_triage=$ISSUES" >> "$GITHUB_OUTPUT"

          echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ $(echo "$ISSUES" | jq 'length') issue –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏! üéØ"

      - name: –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ issue —Å –ø–æ–º–æ—â—å—é Gemini
        if: steps.find_issues.outputs.issues_to_triage != '[]'
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          ISSUES_TO_TRIAGE: ${{ steps.find_issues.outputs.issues_to_triage }}
          REPOSITORY: ${{ github.repository }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh label list)",
                "run_shell_command(gh issue edit)",
                "run_shell_command(gh issue list)"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |
            –¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ issue. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∫–∏.
            
            –®–∞–≥–∏:
            1. –í—ã–ø–æ–ª–Ω–∏: `gh label list`
            2. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: $ISSUES_TO_TRIAGE (JSON-–º–∞—Å—Å–∏–≤ —Å –∑–∞–¥–∞—á–∞–º–∏)
            3. –î–ª—è –∫–∞–∂–¥–æ–π issue –ø—Ä–∏–º–µ–Ω–∏ –º–µ—Ç–∫–∏: `gh issue edit ISSUE_NUMBER --add-label "–º–µ—Ç–∫–∞1,–º–µ—Ç–∫–∞2"`. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–∏ –º–µ—Ç–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —à–∞–±–ª–æ–Ω–∞–º `kind/*`, `area/*` –∏ `priority/*`.
            4. –î–ª—è –∫–∞–∂–¥–æ–π issue, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–∫–∞ `status/needs-triage`, —É–¥–∞–ª–∏ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: `gh issue edit ISSUE_NUMBER --remove-label "status/needs-triage"`
            
            –ü—Ä–∞–≤–∏–ª–∞:
            - –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –º–µ—Ç–∫–∏.
            - –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
            - –°–æ—Ä—Ç–∏—Ä—É–π –∫–∞–∂–¥—É—é issue –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.

  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç Gemini –¥–ª—è issues
  gemini-backup:
    name: –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç Gemini
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'backup-response'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v4

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ç–æ–∫–µ–Ω–∞
        id: auth
        uses: ./.github/actions/setup-github-app
        with:
          app_id: ${{ vars.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        run: |
          pip install requests google-generativeai

      - name: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ steps.auth.outputs.token }}
          ISSUE_NUMBER: ${{ inputs.issue_number }}
        run: |
          python3 << 'EOF'
          import os
          import requests
          import google.generativeai as genai
          import json

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-2.5-pro')

          # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π issue
          repo = os.environ['GITHUB_REPOSITORY']
          issue_number = os.environ['ISSUE_NUMBER']
          
          # –ó–∞–ø—Ä–æ—Å –∫ GitHub API
          headers = {
              'Authorization': f"Bearer {os.environ['GITHUB_TOKEN']}",
              'Accept': 'application/vnd.github+json'
          }
          
          issue_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}"
          response = requests.get(issue_url, headers=headers)
          
          if response.status_code != 200:
              print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è issue: {response.status_code}")
              exit(1)
          
          issue_data = response.json()
          
          # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          context = f"""
          –¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo}.
          –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å —Å issue #{issue_number}.

          **–ù–∞–∑–≤–∞–Ω–∏–µ:** {issue_data['title']}

          **–û–ø–∏—Å–∞–Ω–∏–µ:**
          {issue_data['body']}

          **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**
          1.  **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π** –ø—Ä–æ–±–ª–µ–º—É, –æ–ø–∏—Å–∞–Ω–Ω—É—é –≤ issue.
          2.  **–ü—Ä–µ–¥–ª–æ–∂–∏** —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.
          3.  –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, **–ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞**.
          4.  **–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.**
          """
          
          try:
              # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
              ai_response = model.generate_content(context)
              response_text = ai_response.text
              
              # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
              comment_data = {
                  'body': f"ü§ñ **AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini (–†–µ–∑–µ—Ä–≤–Ω—ã–π)**\n\n{response_text}\n\n---\n*–†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Google Gemini 2.5 Pro*"
              }
              
              comment_url = f"https://api.github.com/repos/{repo}/issues/{issue_number}/comments"
              post_response = requests.post(comment_url, headers=headers, json=comment_data)
              
              if post_response.status_code == 201:
                  print("‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ issue")
              else:
                  print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {post_response.status_code}")
                  print(post_response.text)
                  
          except Exception as e:
              print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI: {str(e)}")
              exit(1)
          EOF