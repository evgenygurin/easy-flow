name: Gemini CLI

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  gemini-cli:
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage'))) && 
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ GitHub App
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ PR
        id: get_pr_branch
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER=${{ github.event.issue.number }}
            BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q .headRefName --repo "$REPOSITORY")
            echo "name=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          fi
      - name: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ PR
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ steps.get_pr_branch.outputs.name }}
          fetch-depth: 0

      - name: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π PR
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          gh pr comment $PR_NUMBER --body "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–∏–º! ü§ñ" --repo $REPOSITORY
      - name: –ó–∞–ø—É—Å–∫ Gemini
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
          USER_REQUEST: ${{github.event.comment.body}}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git config)",
                "run_shell_command(git status)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(git diff)",
                "write_file"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |
            –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ shell-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            –ù–∞—á–Ω–∏ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
              1. –í—ã–ø–æ–ª–Ω–∏: `echo "$USER_REQUEST"`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              2. –í—ã–ø–æ–ª–Ω–∏: `echo "$REPOSITORY"`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
              3. –í—ã–ø–æ–ª–Ω–∏: `echo "$PR_NUMBER"`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä PR
              4. –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π: `cat –∏–º—è_—Ñ–∞–π–ª–∞`, `head -50 –∏–º—è_—Ñ–∞–π–ª–∞` –∏–ª–∏ `tail -50 –∏–º—è_—Ñ–∞–π–ª–∞`
            –û—Ç–≤–µ—Ç—å –Ω–∞ $USER_REQUEST;
            –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
            1. –ï—Å–ª–∏ —Ç—ã –≤–Ω–µ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é 'git add .'. –í–ê–ñ–ù–û: –Ω–µ –¥–æ–±–∞–≤–ª—è–π —Ñ–∞–π–ª response.md.
            2. –ó–∞–∫–æ–º–º–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è 'git commit -m "—Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"'.
            3. –û—Ç–ø—Ä–∞–≤—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ç–∫—É —Å –ø–æ–º–æ—â—å—é 'git push'.
            4. –ó–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª: write_file("response.md", "<—Ç–≤–æ–π –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å>")
            5. –û–ø—É–±–ª–∏–∫—É–π –æ—Ç–≤–µ—Ç: gh pr comment $PR_NUMBER --body-file response.md --repo $REPOSITORY
