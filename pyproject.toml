[project]
name = "easy-flow"
version = "0.1.0"
description = "AI-powered workflow automation and conversation management system"
authors = [
    {name = "Easy Flow Team", email = "team@easyflow.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["ai", "workflow", "automation", "conversation", "nlp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "redis>=5.0.1",
    
    # AI/ML
    "openai>=1.3.0",
    "langchain>=0.0.350",
    "sentence-transformers>=2.2.2",
    
    # HTTP Client
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Data Processing
    "pandas>=2.1.4",
    "numpy>=1.25.2",
    
    # Monitoring
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    
    # Russian Language Support
    "pymorphy2>=0.9.1",
    "razdel>=0.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "ruff>=0.6.9",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "types-setuptools>=69.0.0",
    "types-requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/easy-flow"
Documentation = "https://github.com/yourusername/easy-flow#readme"
Repository = "https://github.com/yourusername/easy-flow"
Issues = "https://github.com/yourusername/easy-flow/issues"

[project.scripts]
easy-flow = "main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
# Black compatibility
line-length = 88
target-version = "py311"

# Rule selection for linting
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "PIE",  # flake8-pie
    "PL",   # pylint
]

# Ignored rules
ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "E501",  # Line too long (handled by ruff format)
    "PLR0913",  # Too many arguments
]

# Files to exclude from linting
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
# Tests can skip docstring requirements
"tests/**/*.py" = ["D"]

[tool.ruff.isort]
# Import sorting configuration
combine-as-imports = true
force-single-line = false
force-sort-within-sections = false
lines-after-imports = 2
known-first-party = ["app"]

[tool.mypy]
python_version = "3.11"
# Gradual typing adoption - start with warnings
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
# Softer settings for initial phase
check_untyped_defs = true
warn_untyped_defs = true
warn_incomplete_stub = true
# Gradually enable stricter rules:
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# disallow_untyped_calls = true
# disallow_any_generics = true
# strict = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "langchain.*",
    "sentence_transformers.*",
    "structlog.*",
    "prometheus_client.*",
    "pymorphy2.*",
    "razdel.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]