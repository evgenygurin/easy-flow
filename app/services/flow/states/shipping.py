"""–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
import random
import re
from typing import Any

from .base import ConversationState, StateContext, StateResult


class ShippingState(ConversationState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."""

    def __init__(self):
        super().__init__("shipping")

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
        self.address_patterns = [
            r'–≥\.\s*([^\s,]+)',  # –≥. –ú–æ—Å–∫–≤–∞
            r'–≥–æ—Ä–æ–¥\s+([^\s,]+)',  # –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞
            r'—É–ª\.\s*([^,\d]+)',  # —É–ª. –õ–µ–Ω–∏–Ω–∞
            r'—É–ª–∏—Ü–∞\s+([^,\d]+)',  # —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞
            r'–¥\.\s*(\d+)',  # –¥. 10
            r'–¥–æ–º\s+(\d+)',  # –¥–æ–º 10
            r'–∫–≤\.\s*(\d+)',  # –∫–≤. 25
            r'–∫–≤–∞—Ä—Ç–∏—Ä–∞\s+(\d+)'  # –∫–≤–∞—Ä—Ç–∏—Ä–∞ 25
        ]

        # –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        self.delivery_methods = {
            "courier": ["–∫—É—Ä—å–µ—Ä", "–∫—É—Ä—å–µ—Ä–æ–º", "–¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º"],
            "pickup": ["—Å–∞–º–æ–≤—ã–≤–æ–∑", "–∑–∞–±—Ä–∞—Ç—å", "pickup", "–ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏"],
            "post": ["–ø–æ—á—Ç–∞", "–ø–æ—á—Ç–æ–π", "—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –ø–æ—á—Ç–∞"],
            "express": ["—ç–∫—Å–ø—Ä–µ—Å—Å", "–±—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", "—Å—Ä–æ—á–Ω–æ"]
        }

    async def enter(self, context: StateContext) -> StateResult:
        """–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        self.logger.info("–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")

        greeting = "–ü–æ–º–æ–≥—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

        return StateResult(
            response=greeting,
            requires_input=True,
            suggested_actions=[
                "–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
                "–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É",
                "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"
            ]
        )

    async def handle_input(self, context: StateContext, message: str,
                          intent: str | None = None,
                          entities: dict[str, Any] | None = None) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        if not self.validate_input(message, intent):
            return StateResult(
                response="–ù–µ –ø–æ–Ω—è–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
                requires_input=True
            )

        message_lower = message.lower().strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
        address_parts = self._extract_address(message)
        if address_parts:
            context.add_entity("address_parts", address_parts)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_method = self._detect_delivery_method(message_lower)
        if delivery_method:
            context.add_entity("delivery_method", delivery_method)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        if intent == "delivery_methods" or any(word in message_lower for word in ["—Å–ø–æ—Å–æ–±—ã", "–∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å", "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"]):
            return await self._handle_delivery_methods(context)

        elif intent == "change_address" or any(word in message_lower for word in ["–∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", "–Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å", "–¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å"]):
            return await self._handle_change_address(context, message)

        elif intent == "track_delivery" or any(word in message_lower for word in ["–æ—Ç—Å–ª–µ–¥–∏—Ç—å", "–≥–¥–µ –ø–æ—Å—ã–ª–∫–∞", "—Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏"]):
            return await self._handle_track_delivery(context, message)

        elif intent == "delivery_time" or any(word in message_lower for word in ["–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", "–∫–æ–≥–¥–∞ –ø—Ä–∏–≤–µ–∑—É—Ç", "—Å—Ä–æ–∫–∏"]):
            return await self._handle_delivery_time(context, message)

        elif intent == "delivery_cost" or any(word in message_lower for word in ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç"]):
            return await self._handle_delivery_cost(context, message)

        elif any(word in message_lower for word in ["–∑–∞–∫–∞–∑", "—Ç–æ–≤–∞—Ä", "–æ–ø–ª–∞—Ç–∞"]):
            return StateResult(
                response="–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∑–∞–∫–∞–∑–∞–º –∏ –æ–ø–ª–∞—Ç–µ –ø–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
                next_state="order",
                should_continue=True
            )

        else:
            return await self._handle_general_delivery_question(context, message)

    async def _handle_delivery_methods(self, context: StateContext) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ —Å–ø–æ—Å–æ–±–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏."""
        methods_info = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:

üöö –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –ü–æ –ú–æ—Å–∫–≤–µ: 300 —Ä—É–±., 1-2 –¥–Ω—è
‚Ä¢ –ü–æ –ú–û: 400 —Ä—É–±., 2-3 –¥–Ω—è
‚Ä¢ –ü–æ –†–æ—Å—Å–∏–∏: –æ—Ç 500 —Ä—É–±., 3-7 –¥–Ω–µ–π

üì¶ –ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 1000 —Ä—É–±.
‚Ä¢ –ë–æ–ª–µ–µ 2000 –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è

üìÆ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏
‚Ä¢ –û—Ç 200 —Ä—É–±.
‚Ä¢ 7-14 –¥–Ω–µ–π
‚Ä¢ –î–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è —Å–≤—è–∑–∏

‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –í –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞: +500 —Ä—É–±.
‚Ä¢ –¢–æ–ª—å–∫–æ –ø–æ –ú–æ—Å–∫–≤–µ
        """.strip()

        return StateResult(
            response=methods_info,
            requires_input=True,
            suggested_actions=[
                "–í—ã–±—Ä–∞—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫—É—é –¥–æ—Å—Ç–∞–≤–∫—É",
                "–ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏",
                "–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞",
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
            ]
        )

    async def _handle_change_address(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        address_parts = context.get_entity("address_parts")
        order_number = context.get_entity("order_number")

        if address_parts:
            address_text = self._format_address(address_parts)
            response = f"–ü–æ–Ω—è–ª, –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å: {address_text}."

            if order_number:
                response += f"\n\n–ò–∑–º–µ–Ω—è—é –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_number}."
            else:
                response += "\n\n–î–ª—è –∫–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å? –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."

        else:
            response = """
–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ:
‚Ä¢ –ì–æ—Ä–æ–¥
‚Ä¢ –£–ª–∏—Ü–∞ –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞
‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
‚Ä¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞

–ù–∞–ø—Ä–∏–º–µ—Ä: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 25, –∑–∞–∫–∞–∑ 123456"
            """.strip()

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
                "–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
                "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"
            ]
        )

    async def _handle_track_delivery(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
        order_number = context.get_entity("order_number") or self._extract_order_number(message)

        if order_number:
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            mock_tracking_info = {
                "status": "–í –ø—É—Ç–∏",
                "current_location": "–°–æ—Ä—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä –≥. –ú–æ—Å–∫–≤–∞",
                "estimated_delivery": "–ó–∞–≤—Ç—Ä–∞, 15:00-18:00",
                "courier_phone": "+7 (999) 123-45-67"
            }

            response = f"""
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_number}:

üìç –°—Ç–∞—Ç—É—Å: {mock_tracking_info['status']}
üöö –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {mock_tracking_info['current_location']}
‚è∞ –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {mock_tracking_info['estimated_delivery']}
üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫—É—Ä—å–µ—Ä–∞: {mock_tracking_info['courier_phone']}

–ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∑–∞ —á–∞—Å –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏.
            """.strip()

        else:
            response = "–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä."

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä—å–µ—Ä–æ–º",
                "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–î—Ä—É–≥–æ–π –∑–∞–∫–∞–∑"
            ]
        )

    async def _handle_delivery_time(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        delivery_method = context.get_entity("delivery_method")

        if delivery_method == "courier":
            response = """
–í—Ä–µ–º—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:
üïê –ü–æ –ú–æ—Å–∫–≤–µ: 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
üïê –ü–æ –ú–û: 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
üïê –ü–æ –†–æ—Å—Å–∏–∏: 3-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π

–î–æ—Å—Ç–∞–≤–∫–∞ —Å 9:00 –¥–æ 21:00
–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª.
            """.strip()

        elif delivery_method == "express":
            response = """
–≠–∫—Å–ø—Ä–µ—Å—Å-–¥–æ—Å—Ç–∞–≤–∫–∞:
‚ö° –í –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞ –¥–æ 23:00
‚ö° –¢–æ–ª—å–∫–æ –ø–æ –ú–æ—Å–∫–≤–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î
‚ö° –ó–∞–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–æ 15:00
            """.strip()

        else:
            response = """
–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞:

üöö –ö—É—Ä—å–µ—Ä: 1-7 –¥–Ω–µ–π
üì¶ –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: 2-5 –¥–Ω–µ–π
üìÆ –ü–æ—á—Ç–∞: 7-14 –¥–Ω–µ–π
‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å: –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞

–¢–æ—á–Ω—ã–π —Å—Ä–æ–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.
            """.strip()

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–£—Å–∫–æ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É",
                "–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏"
            ]
        )

    async def _handle_delivery_cost(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        response = """
–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:

üöö –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:
‚Ä¢ –ú–æ—Å–∫–≤–∞: 300 —Ä—É–±.
‚Ä¢ –ú–û: 400 —Ä—É–±.
‚Ä¢ –†–µ–≥–∏–æ–Ω—ã: –æ—Ç 500 —Ä—É–±.

üì¶ –ü—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏:
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 1000 —Ä—É–±.
‚Ä¢ –î–æ 1000 —Ä—É–±.: 150 —Ä—É–±.

üìÆ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏: –æ—Ç 200 —Ä—É–±.
‚ö° –≠–∫—Å–ø—Ä–µ—Å—Å: +500 —Ä—É–±.

–¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
        """.strip()

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞",
                "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
                "–°–ø–æ—Å–æ–±—ã —ç–∫–æ–Ω–æ–º–∏–∏"
            ]
        )

    async def _handle_general_delivery_question(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ."""
        responses = [
            "–ü–æ –¥–æ—Å—Ç–∞–≤–∫–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º. What –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫?",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ?"
        ]

        return StateResult(
            response=random.choice(responses),
            requires_input=True,
            suggested_actions=[
                "–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
                "–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É",
                "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"
            ]
        )

    def _extract_address(self, message: str) -> dict[str, str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        address_parts = {}

        for pattern in self.address_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                value = match.group(1).strip()
                if '–≥.' in pattern or '–≥–æ—Ä–æ–¥' in pattern:
                    address_parts['city'] = value
                elif '—É–ª.' in pattern or '—É–ª–∏—Ü–∞' in pattern:
                    address_parts['street'] = value
                elif '–¥.' in pattern or '–¥–æ–º' in pattern:
                    address_parts['house'] = value
                elif '–∫–≤.' in pattern or '–∫–≤–∞—Ä—Ç–∏—Ä–∞' in pattern:
                    address_parts['apartment'] = value

        return address_parts

    def _format_address(self, address_parts: dict[str, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        parts = []
        if 'city' in address_parts:
            parts.append(f"–≥. {address_parts['city']}")
        if 'street' in address_parts:
            parts.append(f"—É–ª. {address_parts['street']}")
        if 'house' in address_parts:
            parts.append(f"–¥. {address_parts['house']}")
        if 'apartment' in address_parts:
            parts.append(f"–∫–≤. {address_parts['apartment']}")

        return ', '.join(parts)

    def _detect_delivery_method(self, message: str) -> str | None:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        for method, keywords in self.delivery_methods.items():
            if any(keyword in message for keyword in keywords):
                return method

        return None

    def _extract_order_number(self, message: str) -> str | None:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        patterns = [
            r'\b(\d{6,12})\b',  # 6-12 —Ü–∏—Ñ—Ä
            r'[‚Ññ#]\s*(\d+)',     # ‚Ññ –∏–ª–∏ # —Å —Ü–∏—Ñ—Ä–∞–º–∏
            r'–∑–∞–∫–∞–∑\s*(\d+)',    # "–∑–∞–∫–∞–∑ 123456"
        ]

        for pattern in patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                return match.group(1)

        return None

    def get_available_actions(self, context: StateContext) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        base_actions = [
            "–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏"
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if context.has_entity("order_number"):
            base_actions.extend([
                "–û—Ç—Å–ª–µ–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É",
                "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä—å–µ—Ä–æ–º"
            ])

        return base_actions

    def can_transition_to(self, next_state: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
        allowed_transitions = ["order", "payment", "hello", "hangup"]
        return next_state in allowed_transitions
