"""–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
import random
import re
from typing import Any

from .base import ConversationState, StateContext, StateResult


class PaymentState(ConversationState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ - –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞, –æ–ø–ª–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—Ç—ã."""

    def __init__(self):
        super().__init__("payment")

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        self.payment_methods = {
            "card": ["–∫–∞—Ä—Ç–∞", "–∫–∞—Ä—Ç–æ–π", "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "visa", "mastercard"],
            "cash": ["–Ω–∞–ª–∏—á–Ω—ã–µ", "–Ω–∞–ª–∏—á–Ω—ã–º–∏", "–¥–µ–Ω—å–≥–∏", "–∫—ç—à"],
            "online": ["–æ–Ω–ª–∞–π–Ω", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–±–µ—Ä–±–∞–Ω–∫ –æ–Ω–ª–∞–π–Ω", "—Ç–∏–Ω—å–∫–æ—Ñ—Ñ"],
            "yoomoney": ["—è–Ω–¥–µ–∫—Å –¥–µ–Ω—å–≥–∏", "yoomoney", "—è–Ω–¥–µ–∫—Å.–¥–µ–Ω—å–≥–∏"],
            "qr": ["qr", "–∫—å—é –∞—Ä", "qr –∫–æ–¥", "–ø–æ –∫–æ–¥—É"]
        }

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—É–º–º
        self.amount_patterns = [
            r'(\d+)\s*—Ä—É–±',
            r'(\d+)\s*‚ÇΩ',
            r'(\d+)\s*—Ä—É–±–ª–µ–π',
            r'(\d+)\s*—Ç—ã—Å—è—á',
            r'(\d+\.?\d*)\s*—Ç—ã—Å'
        ]

    async def enter(self, context: StateContext) -> StateResult:
        """–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
        self.logger.info("–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π")

        greeting = "–ü–æ–º–æ–≥—É —Å –æ–ø–ª–∞—Ç–æ–π! –ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫?"

        return StateResult(
            response=greeting,
            requires_input=True,
            suggested_actions=[
                "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
                "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π",
                "–í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏"
            ]
        )

    async def handle_input(self, context: StateContext, message: str,
                          intent: str | None = None,
                          entities: dict[str, Any] | None = None) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
        if not self.validate_input(message, intent):
            return StateResult(
                response="–ù–µ –ø–æ–Ω—è–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
                requires_input=True
            )

        message_lower = message.lower().strip()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        amount = self._extract_amount(message)
        if amount:
            context.add_entity("payment_amount", amount)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        payment_method = self._detect_payment_method(message_lower)
        if payment_method:
            context.add_entity("payment_method", payment_method)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        if intent == "payment_methods" or any(word in message_lower for word in ["—Å–ø–æ—Å–æ–±—ã", "–∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å", "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã"]):
            return await self._handle_payment_methods(context)

        elif intent == "make_payment" or any(word in message_lower for word in ["–æ–ø–ª–∞—Ç–∏—Ç—å", "–∑–∞–ø–ª–∞—Ç–∏—Ç—å", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"]):
            return await self._handle_make_payment(context, message)

        elif intent == "payment_problem" or any(word in message_lower for word in ["–Ω–µ –ø—Ä–æ—à–ª–∞", "–æ—à–∏–±–∫–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"]):
            return await self._handle_payment_problem(context, message)

        elif intent == "refund" or any(word in message_lower for word in ["–≤–µ—Ä–Ω—É—Ç—å", "–≤–æ–∑–≤—Ä–∞—Ç", "–æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂"]):
            return await self._handle_refund_request(context, message)

        elif intent == "check_payment" or any(word in message_lower for word in ["–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", "—Å—Ç–∞—Ç—É—Å", "–ø—Ä–æ—à–ª–∞ –ª–∏"]):
            return await self._handle_check_payment(context, message)

        elif any(word in message_lower for word in ["–∑–∞–∫–∞–∑", "—Ç–æ–≤–∞—Ä", "–∫—É–ø–∏—Ç—å"]):
            return StateResult(
                response="–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –µ–≥–æ –æ—Ñ–æ—Ä–º–∏—Ç—å. –ü–µ—Ä–µ—Ö–æ–∂—É –∫ –∑–∞–∫–∞–∑–∞–º.",
                next_state="order",
                should_continue=True
            )

        else:
            return await self._handle_general_payment_question(context, message)

    async def _handle_payment_methods(self, context: StateContext) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã."""
        methods_info = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (Visa, MasterCard, –ú–ò–†)
üí∞ –ù–∞–ª–∏—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—É –∏–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
üåê –û–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∏–Ω–≥ (–°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω, –¢–∏–Ω—å–∫–æ—Ñ—Ñ)
üîó YooMoney (–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏)
üì± QR-–∫–æ–¥ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º.
        """.strip()

        return StateResult(
            response=methods_info,
            requires_input=True,
            suggested_actions=[
                "–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                "–û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω",
                "–ù–∞–ª–∏—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—É",
                "QR-–∫–æ–¥"
            ]
        )

    async def _handle_make_payment(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É."""
        payment_method = context.get_entity("payment_method")
        amount = context.get_entity("payment_amount")

        if payment_method:
            method_name = self._get_method_name(payment_method)
            response = f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method_name}."
        else:
            response = "–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?"

        if amount:
            response += f" –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±."

        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        if payment_method == "card":
            response += "\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤ SMS."
        elif payment_method == "online":
            response += "\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –±–∞–Ω–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."
        elif payment_method == "qr":
            response += "\n\n–ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã."

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π"
            ]
        )

    async def _handle_payment_problem(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π."""
        message_lower = message.lower()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
        if any(word in message_lower for word in ["–Ω–µ –ø—Ä–æ—à–ª–∞", "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", "declined"]):
            problem_type = "declined"
            response = """
–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:

‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
‚Ä¢ –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–Ω–∫–æ–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã
2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            """.strip()

        elif any(word in message_lower for word in ["–æ—à–∏–±–∫–∞", "error", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"]):
            problem_type = "error"
            response = """
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π:

1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
2. –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è, —Å–æ–µ–¥–∏–Ω—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.
            """.strip()

        else:
            problem_type = "general"
            response = "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ —Å –æ–ø–ª–∞—Ç–æ–π?"

        context.add_entity("payment_problem_type", problem_type)

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
                "–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –±–∞–Ω–∫–æ–º",
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
            ]
        )

    async def _handle_refund_request(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."""
        order_number = context.get_entity("order_number")

        if not order_number:
            response = "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–ª–∞—Ç–µ–∂–∞."
        else:
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
            response = f"""
–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_number}:

‚è∞ –°—Ä–æ–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:
‚Ä¢ –ù–∞ –∫–∞—Ä—Ç—É: 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–µ: –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞

üìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:
‚Ä¢ –ß–µ–∫ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç (–¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å—É–º–º)

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç?
            """.strip()

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç",
                "–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
                "–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
            ]
        )

    async def _handle_check_payment(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞."""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

        mock_payment_status = {
            "status": "–£—Å–ø–µ—à–Ω–æ",
            "amount": "2500 —Ä—É–±.",
            "method": "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ *1234",
            "date": "15.03.2024 14:30"
        }

        response = f"""
–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:
‚úÖ {mock_payment_status['status']}
üí∞ –°—É–º–º–∞: {mock_payment_status['amount']}
üí≥ –°–ø–æ—Å–æ–±: {mock_payment_status['method']}
üìÖ –î–∞—Ç–∞: {mock_payment_status['date']}

–ù—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ?
        """.strip()

        return StateResult(
            response=response,
            requires_input=True,
            suggested_actions=[
                "–°–ø—Ä–∞–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ",
                "–ß–µ–∫ –Ω–∞ email",
                "–î—Ä—É–≥–æ–π –ø–ª–∞—Ç–µ–∂",
                "–ì–æ—Ç–æ–≤–æ"
            ]
        )

    async def _handle_general_payment_question(self, context: StateContext, message: str) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º."""
        responses = [
            "–ü–æ –ø–ª–∞—Ç–µ–∂–∞–º —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã, —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫?",
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–ª–∞—Ç–µ–∂–æ–º?"
        ]

        return StateResult(
            response=random.choice(responses),
            requires_input=True,
            suggested_actions=[
                "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
                "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π",
                "–í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏"
            ]
        )

    def _extract_amount(self, message: str) -> str | None:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        for pattern in self.amount_patterns:
            match = re.search(pattern, message, re.IGNORECASE)
            if match:
                return match.group(1)

        return None

    def _detect_payment_method(self, message: str) -> str | None:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        for method, keywords in self.payment_methods.items():
            if any(keyword in message for keyword in keywords):
                return method

        return None

    def _get_method_name(self, method: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
        method_names = {
            "card": "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
            "cash": "–ù–∞–ª–∏—á–Ω—ã–µ",
            "online": "–û–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∏–Ω–≥",
            "yoomoney": "YooMoney",
            "qr": "QR-–∫–æ–¥"
        }

        return method_names.get(method, method)

    def get_available_actions(self, context: StateContext) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π."""
        base_actions = [
            "–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã",
            "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if context.has_entity("payment_problem_type"):
            base_actions.extend([
                "–†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É",
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –±–∞–Ω–∫–æ–º",
                "–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
            ])

        return base_actions

    def can_transition_to(self, next_state: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π."""
        allowed_transitions = ["order", "shipping", "hello", "hangup"]
        return next_state in allowed_transitions
