"""–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
import random
from typing import Any

from .base import ConversationState, StateContext, StateResult


class HangupState(ConversationState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."""

    def __init__(self):
        super().__init__("hangup")

        self.goodbye_messages = [
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
            "–ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
            "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã. –£–¥–∞—á–∏!",
            "–†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å! –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
        ]

        self.escalation_messages = [
            "–°–æ–µ–¥–∏–Ω—è—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...",
            "–ü–µ—Ä–µ–¥–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –∂–∏–≤–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
            "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏.",
            "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞."
        ]

    async def enter(self, context: StateContext) -> StateResult:
        """–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
        self.logger.info("–í—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        escalation_reason = context.get_session_data("escalation_reason")
        requires_human = context.should_escalate()

        if escalation_reason or requires_human:
            return await self._handle_escalation(context, escalation_reason)
        else:
            return await self._handle_normal_goodbye(context)

    async def handle_input(self, context: StateContext, message: str,
                          intent: str | None = None,
                          entities: dict[str, Any] | None = None) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        if not self.validate_input(message, intent):
            return StateResult(
                response="–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                should_continue=False,
                requires_input=False
            )

        message_lower = message.lower().strip()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        if any(word in message_lower for word in ["–Ω–µ", "–ø–æ–¥–æ–∂–¥–∏", "–µ—â–µ –≤–æ–ø—Ä–æ—Å", "–ø–æ—Å—Ç–æ–π"]):
            return StateResult(
                response="–•–æ—Ä–æ—à–æ, —è –æ—Å—Ç–∞—é—Å—å –Ω–∞ —Å–≤—è–∑–∏! –ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?",
                next_state="hello",
                should_continue=True
            )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        elif any(word in message_lower for word in ["–æ–ø–µ—Ä–∞—Ç–æ—Ä", "—á–µ–ª–æ–≤–µ–∫", "–º–µ–Ω–µ–¥–∂–µ—Ä", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"]):
            return await self._handle_escalation(context, "user_request")

        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
        elif any(word in message_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks"]):
            return StateResult(
                response="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                should_continue=False,
                requires_input=False
            )

        # –ñ–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
        elif any(word in message_lower for word in ["–∂–∞–ª–æ–±–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–Ω–µ –ø–æ–º–æ–≥–ª–∏", "–ø–ª–æ—Ö–æ"]):
            return await self._handle_escalation(context, "complaint")

        # –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        else:
            return await self._handle_normal_goodbye(context)

    async def _handle_normal_goodbye(self, context: StateContext) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞."""
        goodbye_message = random.choice(self.goodbye_messages)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        user_name = context.get_user_preference("name")
        if user_name:
            goodbye_message = f"{user_name}, {goodbye_message.lower()}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É, –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –±—ã–ª –¥–ª–∏–Ω–Ω—ã–º
        if len(context.conversation_history) > 6:
            summary = self._generate_conversation_summary(context)
            if summary:
                goodbye_message = f"{summary}\n\n{goodbye_message}"

        return StateResult(
            response=goodbye_message,
            should_continue=False,
            requires_input=False,
            metadata={
                "conversation_completed": True,
                "satisfaction_survey": True
            }
        )

    async def _handle_escalation(self, context: StateContext, reason: str | None) -> StateResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."""
        escalation_message = random.choice(self.escalation_messages)

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—á–∏–Ω—ã
        if reason == "complaint":
            escalation_message = "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ. –°–æ–µ–¥–∏–Ω—è—é —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞."
        elif reason == "complex_issue":
            escalation_message = "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π. –ü–µ—Ä–µ–¥–∞—é —ç–∫—Å–ø–µ—Ä—Ç—É."
        elif reason == "technical_issue":
            escalation_message = "–°–æ–µ–¥–∏–Ω—è—é —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        wait_info = self._get_wait_time_info()
        full_message = f"{escalation_message}\n\n{wait_info}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_context = self._prepare_operator_context(context, reason)

        return StateResult(
            response=full_message,
            should_continue=False,
            requires_input=False,
            metadata={
                "escalated_to_human": True,
                "escalation_reason": reason,
                "operator_context": operator_context,
                "priority": self._determine_priority(reason, context)
            }
        )

    def _generate_conversation_summary(self, context: StateContext) -> str | None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –¥–∏–∞–ª–æ–≥–∞."""
        if not context.conversation_history:
            return None

        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        key_points = []

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
        if context.current_intent:
            intent_descriptions = {
                "order_inquiry": "–æ–±—Å—É–∂–¥–∞–ª–∏ –∑–∞–∫–∞–∑",
                "payment_inquiry": "—Ä–∞–∑–±–∏—Ä–∞–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ–ø–ª–∞—Ç—ã",
                "shipping_inquiry": "–≥–æ–≤–æ—Ä–∏–ª–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ",
                "complaint": "—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –∂–∞–ª–æ–±—É",
                "product_info": "–∏–∑—É—á–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"
            }

            if context.current_intent in intent_descriptions:
                key_points.append(intent_descriptions[context.current_intent])

        # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
        if context.has_entity("order_number"):
            order_num = context.get_entity("order_number")
            key_points.append(f"—Ä–∞–±–æ—Ç–∞–ª–∏ —Å –∑–∞–∫–∞–∑–æ–º ‚Ññ{order_num}")

        if key_points:
            return f"–°–µ–≥–æ–¥–Ω—è –º—ã {', '.join(key_points)}."

        return None

    def _get_wait_time_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
        # TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏

        import datetime

        current_hour = datetime.datetime.now().hour

        if 9 <= current_hour <= 18:  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
            return "‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 3-5 –º–∏–Ω—É—Ç\nüìû –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è"
        elif 18 < current_hour <= 22:  # –í–µ—á–µ—Ä–Ω–∏–µ —á–∞—Å—ã
            return "‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 5-10 –º–∏–Ω—É—Ç\nüìû –†–∞–±–æ—Ç–∞–µ–º –¥–æ 22:00"
        else:  # –ù–æ—á–Ω—ã–µ —á–∞—Å—ã
            return "üåô –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å 22:00 –¥–æ 9:00\nüìß –ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–≤–µ—Ç–∏–º —É—Ç—Ä–æ–º"

    def _prepare_operator_context(self, context: StateContext, reason: str | None) -> dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."""
        operator_context = {
            "user_id": context.user_id,
            "session_id": context.session_id,
            "platform": context.platform.value,
            "escalation_reason": reason,
            "conversation_length": len(context.conversation_history),
            "last_intent": context.current_intent,
            "extracted_entities": context.extracted_entities.copy(),
            "user_preferences": context.user_data.copy(),
            "state_history": context.state_history.copy()
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_messages = context.conversation_history[-6:] if len(context.conversation_history) > 6 else context.conversation_history
        operator_context["recent_messages"] = [
            {
                "content": msg.content,
                "type": msg.message_type.value,
                "timestamp": msg.created_at.isoformat()
            }
            for msg in recent_messages
        ]

        return operator_context

    def _determine_priority(self, reason: str | None, context: StateContext) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."""
        high_priority_reasons = ["complaint", "billing_dispute", "technical_issue"]
        high_priority_keywords = ["—Å—Ä–æ—á–Ω–æ", "urgent", "critical", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"]

        if reason in high_priority_reasons:
            return "high"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–æ—á–Ω—ã—Ö —Å–ª–æ–≤
        recent_messages = context.conversation_history[-3:]
        for msg in recent_messages:
            if any(keyword in msg.content.lower() for keyword in high_priority_keywords):
                return "high"

        # –î–ª–∏–Ω–Ω–∞—è –∫–æ–Ωvers–∞—Ü–∏—è –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
        if len(context.conversation_history) > 12:
            return "medium"

        return "normal"

    def get_available_actions(self, context: StateContext) -> list[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        escalation_reason = context.get_session_data("escalation_reason")

        if escalation_reason:
            return [
                "–û–∂–∏–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                "–û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –ø–æ–∑–∂–µ"
            ]
        else:
            return [
                "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                "–ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å",
                "–û—Ü–µ–Ω–∏—Ç—å –æ–±—â–µ–Ω–∏–µ"
            ]

    def can_transition_to(self, next_state: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        # –ò–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É
        allowed_transitions = ["hello"]
        return next_state in allowed_transitions
